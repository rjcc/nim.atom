bundleUUID: "E83914D2-2EF2-455C-80A3-7EC1E029D589"
fileTypes: ["nim"]
scopeName: "source.nim"
firstLineMatch: '^#!.*\\bnimscript\\b'
name: "Nim"

patterns: [
  {
    comment: "A documentation comment."
    captures:
      1:
        name: "punctuation.definition.comment.nim"

      2:
        name: "invalid.illegal.TODO.nim"

    name: "comment.line.number-sign.doc-comment.nim"
    match: "(##\\s*(TODO|todo)?).*$\\n?"
  }
  {
    comment: "A regular comment"
    captures:
      1:
        name: "punctuation.definition.comment.nim"

      2:
        name: "invalid.illegal.TODO.nim"

    name: "comment.line.number-sign.comment.nim"
    match: "(#\\s*(TODO|todo)?).*$\\n?"
  }
  {
    comment: "Built-in, concrete types."
    name: "storage.type.concrete.nim"
    match: "\\b(((uint|int|float)(8|16|32|64)?)|bool|string|cstring|char|byte|tobject|typedesc|stmt|expr)\\b"
  }
  {
    comment: "Built-in, generic types."
    name: "storage.type.generic.nim"
    match: "\\b(range|array|seq|tuple|natural|set|ref|ptr)\\b"
  }
  {
    comment: "A Nim procedure or method"
    patterns: [
      captures:
        1:
          name: "storage.type.proc.nim"

        2:
          name: "entity.name.function.nim"

      begin: "\\b(proc|method|template|macro|iterator|converter)\\s+\\`?([^\\s\\`\\*\\(]*)\\`?(\\s*\\*)?\\s*(\\(|\\=|:|\\[)"
      end: "\\)"
      patterns: [include: "source.nim"]
    ]
    name: "meta.proc.nim"
  }
  {
    comment: "Generic operators for expressions."
    name: "keyword.operator.nim"
    match: "(\\=|\\+|\\-|\\*|\\/|\\<|\\>|\\@|\\$|\\~|\\&|\\%|\\!|\\?|\\^|\\.|\\:|\\\\)+"
  }
  {
    comment: "Other keywords."
    name: "keyword.other.nim"
    match: "(\\b(addr|as|atomic|bind|cast|const|converter|discard|distinct|div|enum|export|from|import|include|let|mod|mixin|object|of|ptr|ref|shl|shr|static|type|var)\\b)"
  }
  {
    comment: "Invalid and unused keywords."
    name: "keyword.invalid.nim"
    match: "(\\b(generic|interface|lambda|out|shared|with|without)\\b)"
  }
  {
    comment: "Common functions"
    name: "keyword.common.function.nim"
    match: "\\b(new|assert|echo|defined|newException|countup|countdown|high|low)\\b"
  }
  {
    comment: "Keyword boolean operators for expressions."
    name: "keyword.operator.boolean.nim"
    match: "(\\b(and|in|is|isnot|not|notin|or|xor)\\b)"
  }
  {
    comment: "A discarded triple string literal comment"
    begin: "discard \\\"\\\"\\\""
    end: "\\\"\\\"\\\""
    name: "comment.line.discarded.nim"
  }
  {
    comment: "A float literal"
    name: "constant.numeric.float.decimal.nim"
    match: "\\b((\\d[_\\d]*\\.[_\\d]+([eE][\\+\\-]?\\d[_\\d]*)?)|([eE][\\+\\-]?\\d[_\\d]*))('[fF](32|64))?"
  }
  {
    comment: "A hexadecimal literal"
    name: "constant.numeric.integer.hexadecimal.nim"
    match: "\\b(0[xX]\\h[_\\h]*)('[iIuU](8|16|32|64))?"
  }
  {
    comment: "A base-8 integer literal"
    name: "constant.numeric.integer.octal.nim"
    match: "\\b(0o[0-7][_0-7]*)('[iIuUfF](8|16|32|64))?"
  }
  {
    comment: "A base-2 integer literal"
    name: "constant.numeric.integer.binary.nim"
    match: "\\b(0(b|B)[01][_01]*)('[iIuUfF](8|16|32|64))?"
  }
  {
    comment: "A base-10 integer literal"
    name: "constant.numeric.integer.decimal.nim"
    match: "\\b(\\d[_\\d]*)('[iIuUfF](8|16|32|64))?"
  }
  {
    comment: "Language Constants."
    name: "constant.language.nim"
    match: "\\b(true|false|inf|nil)\\b"
  }
  {
    comment: "Keywords that affect program control flow or scope."
    name: "keyword.control.nim"
    match: "\\b(block|break|case|continue|do|elif|else|end|except|finally|for|if|raise|return|try|when|while|yield)\\b"
  }
  {
    comment: "Function types"
    name: "storage.type.function.nim"
    match: "\\b(proc|iterator|method|template|macro)\\b"
  }
  {
    comment: "Special types."
    name: "storage.type.generic.nim"
    match: "\\b(openarray|varargs|void)\\b"
  }
  {
    comment: "(Raw) Triple Quoted String"
    begin: "\\\"\\\"\\\""
    end: "\\\"\\\"\\\""
    name: "string.quoted.triple.nim"
  }
  {
    comment: "Raw Double Quoted String"
    patterns: [match: "\\\"\\\""]
    begin: "r\\\""
    end: "\\\""
    name: "string.quoted.double.raw.nim"
  }
  {
    comment: "Double Quoted String"
    patterns: [match: "(\\\\([abenrclftv\\\\]|[\"']|[0-9])|x\\h\\h)"]
    begin: "\\\""
    end: "\\\""
    name: "string.quoted.double.nim"
    captures:
      1:
        name: "storage.type.function.nim"
  }
  {
    comment: "Single quoted character literal"
    name: "string.quoted.single.nim"
    match: "\\'(\\\\\\d{1,3}|\\\\?[^\\n]?)\\'"
  }
  {
    comment: "C"
    patterns: [
      captures:
        1:
          name: "keyword.other.nim"

        2:
          name: "comment.syntax.nim"

      begin: "\\{\\.(emit:) ?(\\\"\\\"\\\")"
      end: "(\\\"\\\"\\\")\\.?"
      endCaptures:
        1:
          name: "comment.syntax.nim"

      patterns: [
        {
          begin: "\\`"
          end: "\\`"
          name: "keyword.operator.nim"
        }
        {
          include: "source.c"
        }
      ]
    ]
    name: "source.c.embedded.nim"
  }
  {
    comment: "assembly"
    patterns: [
      captures:
        1:
          name: "keyword.other.nim"

        2:
          name: "comment.syntax.nim"

      begin: "(asm )(\\\"\\\"\\\")"
      end: "\\\"\\\"\\\""
      endCaptures:
        0:
          name: "comment.syntax.nim"

      patterns: [
        {
          begin: "\\`"
          end: "\\`"
          name: "keyword.operator.nim"
        }
        {
          include: "source.asm"
        }
      ]
    ]
    name: "source.asm.embedded.nim"
  }
  {
    comment: "tmpl specifier"
    captures:
      1:
        name: "storage.type.function.nim"

    match: "(tmpli?)(?=( (html|xml|js|css|glsl))?\\\"\\\"\\\")"
  }
  {
    patterns: [
      captures:
        1:
          name: "storage.type.function.nim"

        2:
          name: "comment.syntax.nim"

      begin: "(html)(\\\"\\\"\\\")"
      end: "\\\"\\\"\\\""
      endCaptures:
        0:
          name: "comment.syntax.nim"

      patterns: [
        {
          captures:
            1:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\("
          end: "\\)"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\{"
          end: "\\}"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )"
          end: "(\\{|\\n)"
          endCaptures:
            1:
              name: "plain"

          patterns: [include: "source.nim"]
        }
        {
          name: "keyword.operator.nim"
          match: "(?<!\\$)(\\$[a-zA-Z0-9]+)"
        }
        {
          include: "text.xml"
        }
      ]
    ]
    name: "source.html.embedded.nim"
  }
  {
    patterns: [
      captures:
        1:
          name: "storage.type.function.nim"

        2:
          name: "comment.syntax.nim"

      begin: "(xml)(\\\"\\\"\\\")"
      end: "\\\"\\\"\\\""
      endCaptures:
        0:
          name: "comment.syntax.nim"

      patterns: [
        {
          captures:
            1:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\("
          end: "\\)"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\{"
          end: "\\}"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )"
          end: "(\\{|\\n)"
          endCaptures:
            1:
              name: "plain"

          patterns: [include: "source.nim"]
        }
        {
          name: "keyword.operator.nim"
          match: "(?<!\\$)(\\$[a-zA-Z0-9]+)"
        }
        {
          include: "text.xml"
        }
      ]
    ]
    name: "source.xml.embedded.nim"
  }
  {
    patterns: [
      captures:
        1:
          name: "storage.type.function.nim"

        2:
          name: "comment.syntax.nim"

      begin: "(js)(\\\"\\\"\\\")"
      end: "\\\"\\\"\\\""
      endCaptures:
        0:
          name: "comment.syntax.nim"

      patterns: [
        {
          captures:
            1:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\("
          end: "\\)"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\{"
          end: "\\}"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )"
          end: "(\\{|\\n)"
          endCaptures:
            1:
              name: "plain"

          patterns: [include: "source.nim"]
        }
        {
          name: "keyword.operator.nim"
          match: "(?<!\\$)(\\$[a-zA-Z0-9]+)"
        }
        {
          include: "source.js"
        }
      ]
    ]
    name: "source.js.embedded.nim"
  }
  {
    patterns: [
      captures:
        1:
          name: "storage.type.function.nim"

        2:
          name: "comment.syntax.nim"

      begin: "(css)(\\\"\\\"\\\")"
      end: "\\\"\\\"\\\""
      endCaptures:
        0:
          name: "comment.syntax.nim"

      patterns: [
        {
          captures:
            1:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\("
          end: "\\)"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\{"
          end: "\\}"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )"
          end: "(\\{|\\n)"
          endCaptures:
            1:
              name: "plain"

          patterns: [include: "source.nim"]
        }
        {
          name: "keyword.operator.nim"
          match: "(?<!\\$)(\\$[a-zA-Z0-9]+)"
        }
        {
          include: "source.css"
        }
      ]
    ]
    name: "source.css.embedded.nim"
  }
  {
    patterns: [
      captures:
        1:
          name: "storage.type.function.nim"

        2:
          name: "comment.syntax.nim"

      begin: "(glsl)(\\\"\\\"\\\")"
      end: "\\\"\\\"\\\""
      endCaptures:
        0:
          name: "comment.syntax.nim"

      patterns: [
        {
          captures:
            1:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\("
          end: "\\)"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)\\{"
          end: "\\}"
          patterns: [include: "source.nim"]
        }
        {
          captures:
            1:
              name: "keyword.operator.nim"

            2:
              name: "keyword.operator.nim"

          begin: "(?<!\\$)(\\$)(for|while|case|of|when|if|else|elif)( )"
          end: "(\\{|\\n)"
          endCaptures:
            1:
              name: "plain"

          patterns: [include: "source.nim"]
        }
        {
          name: "keyword.operator.nim"
          match: "(?<!\\$)(\\$[a-zA-Z0-9]+)"
        }
        {
          include: "source.glsl"
        }
      ]
    ]
    name: "source.glsl.embedded.nim"
  }
]
